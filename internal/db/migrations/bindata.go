// Code generated for package migrations by go-bindata DO NOT EDIT. (@generated)
// sources:
// 000001_create_users_table.down.sql
// 000001_create_users_table.up.sql
// 000002_create_orders_table.down.sql
// 000002_create_orders_table.up.sql
// bindata.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_create_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xc8\x3d\x4e\x55\x1b\x00\x00\x00")

func _000001_create_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_users_tableDownSql,
		"000001_create_users_table.down.sql",
	)
}

func _000001_create_users_tableDownSql() (*asset, error) {
	bytes, err := _000001_create_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_users_table.down.sql", size: 27, mode: os.FileMode(420), modTime: time.Unix(1649405285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_create_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\xd6\xe0\x52\x50\x50\x50\xc8\xc9\x4f\xcf\xcc\x53\x08\x73\x0c\x72\xf6\x70\x0c\x52\xd0\x30\x35\xd0\x54\x08\x08\xf2\xf4\x75\x0c\x8a\x54\xf0\x76\x8d\xd4\x01\xab\x29\x48\x2c\x2e\x2e\xcf\x2f\x4a\x41\x28\x33\x32\x35\xd5\xe4\xd2\xb4\xe6\x02\x04\x00\x00\xff\xff\xd2\x9d\x1f\xd1\x64\x00\x00\x00")

func _000001_create_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_users_tableUpSql,
		"000001_create_users_table.up.sql",
	)
}

func _000001_create_users_tableUpSql() (*asset, error) {
	bytes, err := _000001_create_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_users_table.up.sql", size: 100, mode: os.FileMode(420), modTime: time.Unix(1649439382, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_create_orders_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x2f\x4a\x49\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\x9f\xfb\xdd\x37\x1c\x00\x00\x00")

func _000002_create_orders_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_create_orders_tableDownSql,
		"000002_create_orders_table.down.sql",
	)
}

func _000002_create_orders_tableDownSql() (*asset, error) {
	bytes, err := _000002_create_orders_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_create_orders_table.down.sql", size: 28, mode: os.FileMode(420), modTime: time.Unix(1649405294, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_create_orders_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\xbd\x4e\xc3\x40\x10\xc4\xf1\xde\x4f\x31\x5d\x6c\x89\x82\x86\x8a\x6a\x63\xd6\x70\xe2\x7c\x44\xeb\x0d\x90\x0a\x1d\xb1\x05\x91\x8c\x8d\xee\x43\x7e\x7d\x44\x2c\x45\xa2\xa0\xfe\xfd\x67\x6a\x61\x52\x86\xd2\xd6\x32\x4c\x03\xf7\xa4\xe0\x57\xd3\x69\x87\x39\xf4\x43\x88\x65\x01\x00\x53\xfe\x7a\x1f\x02\xb6\xe6\xde\x38\xc5\x4e\x4c\x4b\x72\xc0\x23\x1f\xae\xce\x3c\xce\x1f\xa7\x09\x78\x26\xa9\x1f\x48\x50\xde\x5c\x57\x10\x6e\x58\xd8\xd5\xdc\x21\xc7\xdf\xa3\x73\x54\xad\x83\x98\x7c\xca\xf1\xef\xe0\x8e\x1b\xda\x5b\xc5\xc6\xf1\xcb\x66\xcd\xfc\xf1\x18\xb2\x1f\x21\x4c\xf6\xe2\x6e\x6f\xed\xca\xcb\x29\x7d\xf6\xc1\x2f\xff\x79\xfe\x1e\x67\xdf\x0f\xfd\x9b\x4f\x50\xd3\x72\xa7\xd4\xee\x2e\xdd\x34\x2f\x65\x55\x54\xb7\xc5\x4f\x00\x00\x00\xff\xff\x98\x00\x03\xb2\x04\x01\x00\x00")

func _000002_create_orders_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_create_orders_tableUpSql,
		"000002_create_orders_table.up.sql",
	)
}

func _000002_create_orders_tableUpSql() (*asset, error) {
	bytes, err := _000002_create_orders_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_create_orders_table.up.sql", size: 260, mode: os.FileMode(420), modTime: time.Unix(1649530721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5d\x6f\xe2\x38\x14\x7d\x8e\x7f\xc5\x1d\xa4\x19\x25\x2b\x36\x84\x90\xf0\x25\x21\xad\xa6\xed\x4a\x7d\xd8\x8e\xb4\xed\x3c\xad\x57\x28\x1f\x36\xb5\x16\x62\xea\x84\xa9\x69\xd5\xff\xbe\xba\x76\x42\x61\x4a\x81\xce\x74\xa5\xad\x64\x12\x1b\xfb\xdc\x73\xae\x7d\xae\x4b\xa7\x03\x67\x32\x67\x30\x63\x05\x53\x49\xc5\x72\xe0\x52\xc1\x32\xc9\xfe\x49\x66\x0c\x16\x62\xa6\x92\x4a\xc8\xa2\x84\x74\x0d\x33\xf9\x6b\x2a\x8a\x3c\xa9\x12\x38\xff\x02\x57\x5f\x6e\xe0\xe2\xfc\xf2\xc6\x07\xf7\xb7\xcd\x6a\x8f\x74\x3a\x50\xca\x95\xca\x58\x39\xc6\xf7\x00\xff\xba\xd3\x4c\xb1\xa4\x62\xd3\x55\xc9\x54\x39\xad\x92\x74\xce\xfc\x5c\xde\x17\x7e\x79\x37\x3f\x3c\x6b\xb5\xdc\x99\x13\x36\x73\xa4\xca\x0f\x40\xed\x9f\xf6\x8c\x55\xcb\xf0\x67\x92\xbc\x94\x4a\x88\x58\x2c\xa5\xaa\xc0\x25\x4e\x2b\x5d\x57\xac\x6c\x11\xa7\x95\xc9\xc5\x52\xb1\xb2\xec\xcc\x1e\xc4\x12\x07\xf8\xa2\xc2\x87\x90\xf6\xb3\x23\xe4\xaa\x12\x73\xec\x48\xb3\x60\x99\x54\xb7\x1d\x2e\xe6\x0c\x5f\x70\xa0\xac\x94\x28\x66\xe6\xbb\x4a\x2c\x58\x8b\x78\x84\xf0\x55\x91\x35\x6c\xfe\x64\x49\xee\x9a\xec\xfe\xf5\x37\x86\x6d\x43\x91\x2c\x18\xd8\x65\x1e\xb8\xcd\x28\x53\x4a\x2a\x0f\x1e\x89\x33\x7b\x30\x3d\x18\x4f\x00\x59\xf9\x57\xec\x1e\x41\x98\x72\x0d\x6d\xec\x7f\x5e\x71\xce\x94\x81\xf5\x3c\xe2\x08\x6e\x16\x7c\x98\x40\x21\xe6\x08\xe1\x28\x56\xad\x54\x81\xdd\x36\xf0\x45\xe5\x5f\x20\x3a\x77\x5b\x08\x04\x1f\xef\xc6\xf0\xf1\x5b\xcb\x32\x31\xb1\x3c\xe2\x3c\x11\xe2\x7c\x4b\x14\xa4\x2b\x0e\x36\x8e\x0d\x42\x9c\xa9\xa5\x33\x01\x21\xfd\x33\xb9\x5c\xbb\x9f\xd2\x15\x6f\xc3\xec\xc1\x23\x4e\x36\xbf\x68\x98\xfa\x67\x73\x59\x32\xd7\x23\xef\xc5\x07\x61\x2c\xfe\x2b\x40\x4c\x29\xcb\xbb\x1e\x4c\x57\xdc\xff\x8c\xd4\x5d\xaf\x8d\x33\xc8\x13\x21\xd5\x7a\xc9\x20\x29\x4b\x56\x61\xca\x57\x59\x85\x28\x46\x5f\xbd\x1f\xc4\x11\x05\x97\x00\xb2\xf4\x7f\x17\x73\x76\x59\x70\xb9\x59\x57\x6f\x61\x33\xbe\x85\x60\xf6\x10\xa0\xde\x46\xe2\x94\xe2\xc1\xf4\x45\x51\xf5\x23\xe2\x2c\xd0\x7c\xb0\x01\xfd\x43\xe6\xcc\x0c\xde\x88\x05\x03\x3c\x26\x3e\xbe\x61\x9c\x4e\x07\xae\x10\xab\x96\x80\x27\xcb\xa4\xc1\x9e\x21\x97\x8b\xef\x49\x78\x66\xbe\xeb\xd5\xa1\x91\xcc\x66\xad\x6f\x56\x5a\xd4\x6b\x64\xb4\x8d\x8a\x14\x0f\xa0\xe2\x7c\xd7\xb3\x02\x76\x41\xcd\x42\x0b\x8a\x42\x76\x40\x51\xe8\x01\x50\x9c\xef\x7a\xdb\x69\xd8\x85\x36\xcb\x5f\x87\x16\x7c\x6d\xb2\x75\x38\x02\xa6\xd2\xf5\x9e\xd3\xfa\x22\xc4\x56\xae\x2f\xcb\x73\xa1\x76\xc2\xdc\xdf\xb2\xea\x96\x29\x48\x20\x17\x8a\x65\x95\x54\xeb\x03\xe1\xcc\x7a\xd7\x83\x54\xca\xf9\x4b\x29\x9f\x64\xe9\xa3\x0e\x8c\xf1\x61\x02\x41\xb3\x15\xeb\x72\x27\xa4\x28\xa1\x5c\x97\xc7\x72\x77\xbd\x2e\xed\x7e\x30\xc5\x93\x8c\x3d\x3e\x6d\xc5\xab\x0f\x37\xfa\x75\x3a\x7d\xb5\xcc\x9e\xcb\xfb\xe2\xfa\x6e\x0e\x93\xfa\xa8\xbb\x2d\xaa\xbb\x9c\xea\x61\x4a\x75\x30\xa4\x3a\x08\xf6\x37\xce\xa9\x1e\x84\x54\x07\x23\xaa\x39\x3e\x39\xd5\x71\x60\xd7\x0c\xba\x54\x0f\x22\x3b\x8e\xef\x71\x4c\x35\x0f\xec\x58\xdc\xa3\x7a\x10\x50\x3d\xcc\xed\x58\x90\x51\x1d\x30\x8b\x13\xf7\xa9\x0e\x87\x54\x87\x39\xd5\x11\xb3\xcf\x30\xa1\x3a\xed\x53\x1d\x60\x8b\x76\xe3\x63\xcb\x86\x54\xf7\xea\xf9\x18\xa7\x9b\x6e\xf3\x6c\x35\x85\xf6\x68\x02\xea\x9a\xb0\xaf\xd6\x36\x95\x63\xab\x56\x13\xc7\x39\x9e\xd3\x36\x71\x9c\xd6\xf1\x5b\xb0\xd5\x26\x8e\x87\x3b\x75\x1a\x51\xe4\xf8\x8b\x29\x56\xdb\x1c\x4d\xb5\xda\x5c\x09\xa7\xaa\x3d\x56\x85\x37\xc5\xd3\x94\xbf\xf1\xe4\xfb\x03\xf8\x88\xb5\x64\x0c\x27\x89\x34\xb5\x65\x0c\xe1\xa0\x6d\x0e\xf5\x78\xdb\xf0\x6e\x14\x06\x9e\x19\x47\x1b\x8e\xad\x4d\xbf\x16\x42\xbb\xdd\x7e\x34\x8a\x82\x38\x1c\xc6\x6d\x08\xbc\x27\xe2\x24\x48\xe3\x93\xd1\xff\x68\x44\x8f\xa1\xd6\x8e\x1c\xc7\xe6\xf3\x69\xb3\x67\x49\xfb\x44\x1b\x7c\x5d\xfe\x94\x09\x98\x7d\x0e\x62\x7b\xa0\x9b\x43\x7f\x8a\x19\xf0\x9d\xf7\x6a\x03\x75\xdf\x6e\x8e\xbc\x4f\x35\x0b\xa8\x8e\x43\x6b\xc0\xa6\xa1\x31\xb2\x11\xd5\x11\x9a\x04\x5b\x66\xe3\x19\x4e\xbd\x9a\x67\x48\x35\xef\xdb\x98\xd8\x47\x8c\x3c\xa0\xba\x87\x2d\xb6\xef\x71\x54\xe7\x60\x68\x35\xf0\xe8\x59\xe7\x30\xb1\xdf\x1b\x3d\x7d\xcb\x3b\xc7\xf9\x5d\xaa\x93\x94\xea\x10\xe3\x23\xe7\x8c\xea\x90\xd9\x86\x5c\x42\x4e\x75\x94\x50\x1d\x75\xad\xa6\x5e\x8f\xea\x5e\x58\xc7\x8c\xa9\x66\x11\xd5\x79\x48\x75\x1a\x51\xcd\xd0\xf8\xe1\x7e\xf3\xe3\x9c\x51\x6e\xf7\x2a\xef\x52\xdd\x8f\xde\x68\x7e\xb3\xed\xef\x69\x7d\x03\x78\xc4\xf8\xf6\x9f\xd1\x53\x6d\x6f\x10\x7f\xce\xf4\xdb\x2a\xff\x7b\xcb\x37\xf2\x6a\xc3\x77\x83\xe0\xed\x8e\xef\x8d\x7a\xc3\xf0\xfd\x1c\xbf\xf7\x47\xc1\xff\xed\xe6\x43\xc3\x6e\x8c\x31\x3a\xed\xf6\x1b\xe1\x33\xa5\x3a\xcf\xa9\xee\x0d\xa8\xee\x66\x07\x0c\x70\x28\x0b\x3f\xea\x81\x43\x98\xcf\x36\x38\xfc\xdb\x6d\x9f\x13\x0e\xe1\x9e\x6e\x86\x13\x14\xbf\xab\x1f\x8e\xe9\x6c\xee\xc0\xe1\x0f\xdd\x81\xa3\xe8\x5d\x1d\xf1\x6f\x00\x00\x00\xff\xff\xeb\x9e\xad\x09\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1649531509, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_create_users_table.down.sql":  _000001_create_users_tableDownSql,
	"000001_create_users_table.up.sql":    _000001_create_users_tableUpSql,
	"000002_create_orders_table.down.sql": _000002_create_orders_tableDownSql,
	"000002_create_orders_table.up.sql":   _000002_create_orders_tableUpSql,
	"bindata.go":                          bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_create_users_table.down.sql":  &bintree{_000001_create_users_tableDownSql, map[string]*bintree{}},
	"000001_create_users_table.up.sql":    &bintree{_000001_create_users_tableUpSql, map[string]*bintree{}},
	"000002_create_orders_table.down.sql": &bintree{_000002_create_orders_tableDownSql, map[string]*bintree{}},
	"000002_create_orders_table.up.sql":   &bintree{_000002_create_orders_tableUpSql, map[string]*bintree{}},
	"bindata.go":                          &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
